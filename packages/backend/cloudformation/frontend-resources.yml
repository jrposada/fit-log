Resources:
  # S3 Bucket for Frontend Hosting
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${self:service}-${self:provider.stage}-frontend
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    DeletionPolicy: Delete

  # S3 Bucket Policy to Grant CloudFront OAC Access
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudFrontOAC
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource:
              Fn::Sub:
                - ${s3BucketArn}/*
                - s3BucketArn:
                    Fn::GetAtt:
                      - FrontendBucket
                      - Arn
            Condition:
              StringEquals:
                AWS:SourceArn:
                  Fn::Sub:
                    - arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistributionId}
                    - CloudFrontDistributionId:
                        Ref: FrontendCloudFrontDistribution

  # CloudFront Origin Access Control
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: ${self:service}-${self:provider.stage}-OAC
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Distribution for the Frontend
  FrontendCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          # For more info see https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html#managed-cache-caching-optimized
          # CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CacheOptimized
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
        CacheBehaviors:
          - PathPattern: '/api/*'
            TargetOriginId: ApiOrigin
            ViewerProtocolPolicy: https-only
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
            CachedMethods:
              - GET
              - HEAD
            # Have to use legacy system as CachePolicyId do not work for our application
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: all
        DefaultRootObject: index.html
        Origins:
          - Id: S3Origin
            DomainName: ${self:service}-${self:provider.stage}-frontend.s3.${self:provider.region}.amazonaws.com
            S3OriginConfig:
              OriginAccessIdentity: # If you're using origin access control (OAC) instead of origin access identity, specify an empty OriginAccessIdentity element
            OriginAccessControlId:
              Fn::GetAtt:
                - CloudFrontOriginAccessControl
                - Id
          - Id: ApiOrigin
            DomainName:
              Fn::Join:
                - ''
                - - Ref: ApiGatewayRestApi
                  - .execute-api.
                  - ${self:provider.region}
                  - .amazonaws.com
            CustomOriginConfig:
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
            OriginPath: /${self:provider.stage}
        PriceClass: PriceClass_100

        # Custom error responses to handle SPA routing
        # FIXME: this custom redirects work, but means we lose 403 from api calls.
        CustomErrorResponses:
          - ErrorCode: 403
            ResponsePagePath: /index.html
            ResponseCode: 200
            ErrorCachingMinTTL: 0
          - ErrorCode: 404
            ResponsePagePath: /index.html
            ResponseCode: 200
            ErrorCachingMinTTL: 0
